
📌 You are and act as an expert in unit testing in Apex (Salesforce) and mutation generation to assess test effectiveness.

📌 Your task is to analyze the following source code, which contains two clearly defined blocks:

**Apex Class:**
```apex
===APEX_CLASS===
```
End Apex Class

**Test Class:**
```apex
===TEST_CLASS===
```
End Test Class

📌 Your task:
1. Propose relevant mutations for this context (changes in operators, conditions, values).
2. Indicate the affected line and the suggested mutation type.
3. Explain whether these mutations should cause the original test to fail.
4. You must propose up to 5 *destructive mutations* (i.e., that cause at least one defined test to fail) that affect **only** the `Apex Class` block. NEVER modify or analyze the `Test Class` block.
5. Ensure the mutations are varied and representative of common errors in Apex.
6. Do not repeat mutations already suggested in the current context.
7. Consider mutations that may be relevant to business logic and validations present in the code.
8. Do not include mutations already present in the original code.
9. Ensure the mutations are coherent with the data types and structures used in Apex.
10. Do not include trivial mutations or ones that don’t add value to the evaluation of unit tests.
11. Consider mutations that can affect both business logic and data validations.
12. Ensure mutations are understandable and easy to implement in the Apex context.
13. Do not include redundant mutations or those that don’t significantly alter the code logic.
14. Ensure the mutations are relevant to the context of the Apex class and its associated test.
15. Consider mutations that can help detect common mistakes in business logic and data validations in Apex.
16. Ensure the mutations are varied and representative of common errors in Apex.
17. Do not include mutations already present in the original code.

📌 Mandatory rules:
1. All mutations must be *destructive*: at least one test must fail as a result of the change.
2. Each mutation must be presented following **exactly** the detailed format below.
3. Make sure the affected line is correctly numbered relative to the `Apex Class` block:
   - Consider the line starting with `public class` as line 1:
     ```apex
     public class ClassName
     ```
   - The line count should begin from this line and cover the entire content of the `Apex Class:` block until its closing.
   - Do NOT include external lines or tags like `Apex Class:` or the triple backticks.
   - This is the total number of lines continuing the Apex Class: `===TOTAL_LINES===`.

4. Do not generate trivial, redundant, or already implied mutations in the original code.
5. If you cannot generate 5 valid mutations without breaking these rules, generate fewer. Do NOT include invalid mutations just to meet the count.

✅ STRICT format for each mutation:
Use **exactly** the following format for each one:
```yaml
### 💥 Mutation [number]:

📝 Description: [action verb + what is changed + why it's relevant or what effect it produces]

📍 Affected line: [number relative to the `Apex Class:` block]

🧠 Mutation type: [type: operator change, value change, logic, return, condition, etc.]

💥 Expected impact: [name(s) of test method(s) expected to fail due to this mutation, with brief explanation]

🔁 Mutated code line:
[TODO: show only the specific modified line]
```

🔁 Original code line:
[TODO: show only the original line as it was]
```

🛡️ Additional Evaluation: Apex Best Practices
Besides applying mutations, you must identify if the `Apex Class` block adheres to the following key best practices (taken from Salesforce’s official guide):

1. Use of Handler pattern (no logic directly in triggers).
2. Use of Return Early to avoid unnecessary nesting.
3. Avoid hardcoded values (use Custom Metadata or Labels).
4. Avoid DML/SOQL inside loops.
5. Proper bulkification of code.
6. Meaningful and explicit exception handling.
7. Use of logs for traceability.
8. Separation of declarative and programmatic logic.
9. Test coverage above 75% with real cases.

If any of these best practices is not met, mention it at the end of your analysis as part of a block:
```yaml
### 🧠 Best Practices Evaluation - Example:

- [x] Uses Return Early correctly  
- [ ] Has hardcoded values (should use Custom Metadata)  
- [ ] Handles exceptions adequately  
- [x] Bulkified code  
- [ ] Logs errors or useful logs  
...
```

🚫 Examples of mistakes to avoid:
❌ Incorrect affected line number (use line count relative to the `Apex Class:` block as explained).  
❌ Mutations on the `Test Class:` block (forbidden).  
❌ Mutations that do not change business logic.  
❌ Only changing the assert message (that doesn’t break the test).  
❌ Invalid mutations in Apex or those that won’t compile.

Ready to proceed? Analyze the code and generate up to 5 valid destructive mutations following this format, and end with the best practices evaluation.
