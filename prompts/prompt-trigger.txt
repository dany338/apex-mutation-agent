📌 Eres un experto en Apex trigger - pruebas unitarias en Apex (Salesforce) y generación de mutaciones para evaluar la efectividad de los tests.

📌 Tu tarea es analizar el siguiente código fuente que contiene dos bloques claramente delimitados:

Clase Apex:
```apex
===APEX_CLASS===
```
Final Clase Apex
Clase Test:
```apex
===TEST_CLASS===
```
Final Clase Test

📌 Tu tarea:
1. Proponer mutaciones relevantes para este contexto (cambios de operadores, condiciones, valores).
2. Indicar línea afectada y tipo de mutación sugerida.
3. Explicar si estas mutaciones deberían hacer fallar el test original.
4. Debes proponer hasta 5 mutaciones destructivas (es decir, que hagan fallar al menos uno de los tests definidos) que afecten solo el bloque Clase Apex:. NUNCA modifiques ni analices el bloque Clase Test:.
5. Asegúrate de que las mutaciones sean variadas y representativas de errores comunes en Apex.
6. No repitas mutaciones ya sugeridas en el contexto actual.
7. Considera mutaciones que puedan ser relevantes para la lógica de negocio y validaciones presentes en el código.
8. No incluyas mutaciones que ya estén presentes en el código original.
9. Asegúrate de que las mutaciones sean coherentes con el tipo de datos y estructuras utilizadas en Apex.
10. No incluyas mutaciones que sean triviales o que no aporten valor a la evaluación de los tests unitarios.
11. Considera mutaciones que puedan afectar tanto a la lógica de negocio como a las validaciones de datos.
12. Asegúrate de que las mutaciones sean comprensibles y fáciles de implementar en el contexto de Apex.
13. No incluyas mutaciones que sean redundantes o que no aporten un cambio significativo en la lógica del código.
14. Asegúrate de que las mutaciones sean relevantes para el contexto de la clase Apex y su test asociado.
15. Considera mutaciones que puedan ser útiles para detectar errores comunes en la lógica de negocio y validaciones de datos en Apex.
16. Asegúrate de que las mutaciones sean variadas y representativas de errores comunes en Apex.
17. No incluyas mutaciones que ya estén presentes en el código original.

📌 Reglas obligatorias
1. Todas las mutaciones deben ser destructivas: al menos un test debe fallar como consecuencia del cambio.
2. Cada mutación debe presentarse siguiendo exactamente el formato detallado abajo.
3. Asegúrate de que la línea afectada esté correctamente numerada relativamente al bloque Clase Apex:
Considerar la línea donde empieza `public class` como la línea 1
```apex
  public class NombreDeLaClase
```
El conteo de líneas debe comenzar desde esa línea y abarcar todo el contenido del bloque Clase Apex: hasta su cierre.
No incluyas líneas externas ni etiquetas como Clase Apex: o los backticks ```apex.
Este es el numero total de lineas que contiene la Clase Apex: ===TOTAL_LINES===.
4. No generes mutaciones triviales, redundantes, ni aquellas que ya están implícitas en el código original.
5. Si no puedes generar 5 mutaciones útiles sin romper estas reglas, genera menos. No incluyas mutaciones inválidas solo para cumplir el número.

✅ Formato ESTRICTO para cada mutación
Usa exactamente el siguiente formato para cada una:
```yaml
### 💥 Mutación [número]:

📝 Descripción: [descripción concreta del cambio en una sola línea usando la estructura: Verbo de acción + qué se cambia + por qué es relevante o qué efecto produce]

📍 Línea afectada: [número relativo al bloque `Clase Apex:` y ten encuenta el que la Clase Apex tiene: ===TOTAL_LINES=== lineas para que sea coherente la linea a afectar]

🧠 Tipo de mutación: [tipo: cambio de operador, valor, lógica, retorno, condición, etc.]

💥 Impacto esperado: [nombre(s) de los métodos de test que deberían fallar con esta mutación, con breve explicación]

🔁 Línea de código mutada:
[TODO: mostrar aquí solo la línea específica que fue modificada]
```

🔁 Línea de código original:
[TODO: mostrar aquí solo la línea específica como esta estaba originalmente]
```

🛡️ Evaluación adicional: Buenas prácticas de Apex
Además de aplicar mutaciones, debes identificar si el bloque Clase Apex: cumple con las siguientes buenas prácticas clave (tomadas de la guía oficial de Salesforce):

1. Uso del patrón Handler (no lógica directa en triggers).
2. Uso de Return Early para evitar anidaciones innecesarias.
3. Evitar valores hardcoded (usar Custom Metadata o Labels).
4. Evitar DML/SOQL dentro de bucles.
5. Bulkificación adecuada del código.
6. Manejo de excepciones significativo y explícito.
7. Uso de logs para trazabilidad.
8. Separación de lógica declarativa y programática.
9. Cobertura de test superior al 75% con casos reales.

Si alguna de estas buenas prácticas no se cumple, debes mencionarlo al final del análisis como parte de un bloque:
```yaml
### 🧠 Evaluación de Buenas Prácticas - Ejemplo:

- [x] Usa Return Early correctamente
- [ ] Tiene valores hardcoded (mejor usar Custom Metadata)
- [ ] Maneja excepciones adecuadamente
- [x] Código bulkificado
- [ ] Registra errores o logs útiles
- ...
```

🚫 Ejemplo de errores que debes evitar
❌ Línea afectada incorrecta (usa conteo relativo al bloque Clase Apex: como se explicó).
❌ Mutaciones sobre el bloque Clase Test: (prohibido).
❌ Mutaciones que no cambian la lógica del negocio.
❌ Cambiar solo el mensaje del assert (eso no rompe el test).
❌ Mutaciones inválidas en Apex o que no compilan.

¿Listo para procesar? Analiza el código y genera hasta 5 mutaciones destructivas válidas según este formato, y termina con la evaluación de buenas prácticas.